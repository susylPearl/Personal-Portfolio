{"version":3,"sources":["reducers/resumeDataReducer.tsx","actions/actionTypes.tsx","reducers/contactDataReducer.tsx","store/redux-store.jsx","actions/portfolioAsynCalls.tsx","components/Header.tsx","components/Footer.tsx","components/About.tsx","components/Contact.tsx","App.jsx","serviceWorker.js","index.jsx"],"names":["state","action","type","payload","initialState","contactFormSubmit","Header","props","resumeData","data","name","occupation","description","city","address","networks","social","map","network","key","href","url","className","id","title","Footer","About","profilepic","image","bio","street","zip","phone","email","resumeDownload","resumedownload","src","alt","Contact","initialFormData","contactName","contactEmail","contactSubject","contactMessage","message","contactmessage","formDataSubmitted","useSelector","contactDataReducer","useState","contactFormData","setData","dispatch","useDispatch","handleChange","useCallback","e","preventDefault","target","resetFormData","handleFormSubmit","requestOptions","method","headers","body","JSON","stringify","fetch","then","catch","error","htmlFor","defaultValue","size","onChange","value","cols","rows","onClick","App","resumeDataReducer","useEffect","ReactGA","initialize","pageview","window","location","pathname","json","main","Boolean","hostname","match","ReactDOM","render","store","createStore","combineReducers","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6b2e18bf.chunk.js","sourcesContent":["import { RECEIVED_DATA, CONTACT_FORM_SUBMITTED } from '../actions/actionTypes';\nimport resumeDataType from '../interfaces/dataType';\n\ntype ActionProps = {\n    type: string,\n    payload: resumeDataType,\n}\n\nexport default function(state = {}, action: ActionProps) {\n    switch (action.type) {\n        case RECEIVED_DATA:\n            return action.payload;\n        case CONTACT_FORM_SUBMITTED:\n            return action.payload;\n        default:\n            return state;\n    }\n}","export const RECEIVED_DATA = 'receivedData';\nexport const CONTACT_FORM_SUBMITTED = 'contactFormSubmit';","import { CONTACT_FORM_SUBMITTED } from '../actions/actionTypes';\n\ntype ActionProps = {\n    type: string,\n    payload: boolean,\n}\n\nexport default function(state = {}, action: ActionProps) {\n    switch (action.type) {\n        case CONTACT_FORM_SUBMITTED:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport resumeDataReducer from '../reducers/resumeDataReducer';\nimport contactDataReducer from '../reducers/contactDataReducer';\n\nexport default function configureStore(initialState) {\n    return createStore(\n        combineReducers({\n            resumeDataReducer,\n            contactDataReducer\n        }),\n        applyMiddleware(thunk),\n        initialState,\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n}","import { RECEIVED_DATA, CONTACT_FORM_SUBMITTED } from './actionTypes';\nimport resumeDataType from '../interfaces/dataType';\n\nexport const receivedData = (payload: resumeDataType) => {\n    return {\n        type: RECEIVED_DATA,\n        payload\n    }\n}\n\nexport const contactFormSubmit = (payload: any) => {\n    return {\n        type: CONTACT_FORM_SUBMITTED,\n        payload\n    }\n}\n\nexport const fetchData = () => {\n    return function(dispatch: any){\n        return fetch('https://gist.githubusercontent.com/susylPearl/afbe4dfee15c3d9d704ca112ad2f1b59/raw/da2a80326dc1ff2bdf72d54a7ca76b0af53259d2/resumeData.json')\n        .then(data => data.json())\n        .then(data => {\n            dispatch(receivedData(data));\n        })\n    }\n}\n\nexport const submitForm = (data: resumeDataType[\"formData\"]) => {\n    return function(dispatch: any){\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        };\n        return fetch('https://node-mailer-api-akatwbj3u.now.sh', requestOptions)\n        .then(data => {\n            dispatch(contactFormSubmit(true));\n        })\n        .catch(error => {\n            dispatch(contactFormSubmit(false));\n        })\n    }\n}\n","import React from 'react';\nimport resumeDataType from '../interfaces/dataType';\n\nexport const Header = (props: resumeDataType) => {\n\n\n   let resumeData = props.data ? {\n      name: props.data.name,\n      occupation: props.data.occupation,\n      description: props.data.description,\n      city: props.data.address.city,\n      networks: props.data.social.map((network) => {\n         return <li key={network.name}><a href={network.url}><i className={network.className}></i></a></li>;\n      })\n   } : null;\n\n   return (\n      resumeData ?\n         <header id=\"home\">\n            <nav id=\"nav-wrap\">\n               <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\n               <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\n               <ul id=\"nav\" className=\"nav\">\n                  <li className=\"current\"><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\n                  <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\n                  {/* <li><a className=\"smoothscroll\" href=\"#resume\">Resume</a></li>\n            <li><a className=\"smoothscroll\" href=\"#portfolio\">Works</a></li>\n            <li><a className=\"smoothscroll\" href=\"#testimonials\">Testimonials</a></li> */}\n                  <li><a className=\"smoothscroll\" href=\"#contact\">Contact</a></li>\n               </ul>\n            </nav>\n\n            <div className=\"row banner\">\n               <div className=\"banner-text\">\n                  <h1 className=\"responsive-headline\">I'm {resumeData.name}.</h1>\n                  <h3>I'm a {resumeData.city} based <span>{resumeData.occupation}</span>. {resumeData.description}.</h3>\n                  <hr />\n                  <ul className=\"social\">\n                     {resumeData.networks}\n                  </ul>\n               </div>\n            </div>\n\n            <p className=\"scrolldown\">\n               <a className=\"smoothscroll\" href=\"#about\"><i className=\"icon-down-circle\"></i></a>\n            </p>\n\n         </header> : <div></div>\n   );\n}","import React from 'react';\nimport resumeDataType from '../interfaces/dataType';\n\nexport const Footer = (props: resumeDataType) => {\n   let resumeData = props.data ? {\n      networks: props.data.social.map((network) => {\n         return <li key={network.name}><a href={network.url}><i className={network.className}></i></a></li>;\n      })\n   } : null;\n\n   return (\n      resumeData ?\n         <footer>\n            <div className=\"row\">\n               <div className=\"twelve columns\">\n                  <ul className=\"social-links\">\n                     {resumeData.networks}\n                  </ul>\n                  <ul className=\"copyright\">\n                     <li>&copy; Copyright 2020 Chiranjhivi Ghimire</li>\n                  </ul>\n               </div>\n               <div id=\"go-top\"><a className=\"smoothscroll\" title=\"Back to Top\" href=\"#home\"><i className=\"icon-up-open\"></i></a></div>\n            </div>\n         </footer> : <div></div>\n   );\n}","import React from 'react';\nimport resumeDataType from '../interfaces/dataType';\n\nexport const About = (props: resumeDataType) => {\n\n    let resumeData = props.data ? {\n        name: props.data.name,\n        profilepic: \"images/\" + props.data.image,\n        bio: props.data.bio,\n        street: props.data.address.street,\n        city: props.data.address.city,\n        state: props.data.address.state,\n        zip: props.data.address.zip,\n        phone: props.data.phone,\n        email: props.data.email,\n        resumeDownload: props.data.resumedownload\n    } : null;\n\n    return (\n        resumeData ?\n            <section id=\"about\">\n                <div className=\"row\">\n                    <div className=\"three columns\">\n                        <img className=\"profile-pic\" src={resumeData.profilepic} alt=\"Chiranjhivi Ghimire\" />\n                    </div>\n                    <div className=\"nine columns main-col\">\n                        <h2>About Me</h2>\n                        <p>{resumeData.bio}</p>\n                        <div className=\"row\">\n                            <div className=\"columns contact-details\">\n                                <h2>Contact Details</h2>\n                                <p className=\"address\">\n                                    <span>{resumeData.name}</span><br />\n                                    <span>{resumeData.street}<br />\n                                        {resumeData.city} {resumeData.state}, {resumeData.zip}\n                                    </span><br />\n                                    <span>{resumeData.phone}</span><br />\n                                    <span>{resumeData.email}</span>\n                                </p>\n                            </div>\n                            <div className=\"columns download\">\n                                <p>\n                                    <a href={resumeData.resumeDownload} className=\"button\"><i className=\"fa fa-download\"></i>Download Resume</a>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </section> : <div></div>\n    );\n}","import React, { useState, useCallback }  from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport resumeDataType from '../interfaces/dataType';\nimport { submitForm } from '../actions/portfolioAsynCalls';\n\nexport const Contact = (props: resumeDataType) => {\n    const initialFormData = {\n        contactName: '',\n        contactEmail: '',\n        contactSubject: '',\n        contactMessage: ''\n    };\n\n    const resumeData = props.data ? {\n        name: props.data.name,\n        street: props.data.address.street,\n        city: props.data.address.city,\n        state: props.data.address.state,\n        zip: props.data.address.zip,\n        phone: props.data.phone,\n        email: props.data.email,\n        message: props.data.contactmessage\n    } : null;\n\n    const formDataSubmitted = useSelector((state: any) => state.contactDataReducer);\n    const [ contactFormData, setData ] = useState(initialFormData);\n    const dispatch = useDispatch();\n\n    const handleChange = useCallback((e: any) => {\n        e.preventDefault();\n        setData({...contactFormData,\n            [e.target.contactName]: e.target.contactName,\n            [e.target.contactEmail]: e.target.contactEmail,\n            [e.target.contactSubject]: e.target.contactSubject,\n            [e.target.contactMessage]: e.target.contactMessage\n        });\n    }, [contactFormData]);\n\n    const resetFormData = useCallback(() => {\n        setData(initialFormData);\n    }, [initialFormData]);\n\n    const handleFormSubmit = useCallback(() => {\n        dispatch(submitForm(contactFormData));\n        if(formDataSubmitted) resetFormData();\n    }, [dispatch, contactFormData, formDataSubmitted, resetFormData]);\n\n    return (\n        resumeData ?\n            <section id=\"contact\">\n                <div className=\"row section-head\">\n                    <div className=\"two columns header-col\">\n                        <h1><span>Get In Touch.</span></h1>\n                    </div>\n                    <div className=\"ten columns\">\n                        <p className=\"lead\">{resumeData.message}</p>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"eight columns\">\n                        <form action=\"\" method=\"post\" id=\"contactForm\" name=\"contactForm\">\n                            <fieldset>\n                                <div>\n                                    <label htmlFor=\"contactName\">Name <span className=\"required\">*</span></label>\n                                    <input type=\"text\" defaultValue={contactFormData.contactName} size={20} id=\"contactName\" name=\"contactName\" onChange={handleChange} />\n                                </div>\n                                <div>\n                                    <label htmlFor=\"contactEmail\">Email <span className=\"required\">*</span></label>\n                                    <input type=\"text\" defaultValue={contactFormData.contactEmail} size={20} id=\"contactEmail\" name=\"contactEmail\" onChange={handleChange} />\n                                </div>\n                                <div>\n                                    <label htmlFor=\"contactSubject\">Subject</label>\n                                    <input type=\"text\" defaultValue={contactFormData.contactSubject} size={20} id=\"contactSubject\" name=\"contactSubject\" onChange={handleChange} />\n                                </div>\n                                <div>\n                                    <label htmlFor=\"contactMessage\">Message <span className=\"required\">*</span></label>\n                                    <textarea value={contactFormData.contactMessage} cols={30} rows={10} id=\"contactMessage\" name=\"contactMessage\" onChange={handleChange}></textarea>\n                                </div>\n                                <div>\n                                    <button className=\"submit\" onClick={handleFormSubmit}>Submit</button>\n                                    <span id=\"image-loader\">\n                                        <img alt=\"\" src=\"images/loader.gif\" />\n                                    </span>\n                                </div>\n                            </fieldset>\n                        </form>\n\n                        <div id=\"message-warning\"> Error boy</div>\n                        <div id=\"message-success\">\n                            <i className=\"fa fa-check\"></i>Your message was sent, thank you!<br />\n                        </div>\n                    </div>\n\n                    <aside className=\"four columns footer-widgets\">\n                        <div className=\"widget widget_contact\">\n                            <h4>Address and Phone</h4>\n                            <p className=\"address\">\n                                {resumeData.name}<br />\n                                {resumeData.street} <br />\n                                {resumeData.city}, {resumeData.state} {resumeData.zip}<br />\n                                <span>{resumeData.phone}</span>\n                            </p>\n                        </div>\n                    </aside>\n                </div>\n            </section> : <div></div>\n    );\n}","import React, { useEffect } from 'react';\nimport ReactGA from 'react-ga';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchData } from './actions/portfolioAsynCalls';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { About } from './components/About';\nimport { Contact } from './components/Contact';\n// import Resume from './components/Resume';\n// import Portfolio from './components/Portfolio';\n// import Testimonials from './components/Testimonials';\nimport './App.css';\n\nconst App = () => {\n\n  const resumeData = useSelector(state => state.resumeDataReducer);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    ReactGA.initialize('UA-110570651-1');\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n\n  useEffect(() => {\n    dispatch(fetchData());\n  }, [dispatch]);\n\n  return (\n    <div className=\"item-main-container\">\n      <Header data={resumeData.main} />\n      <About data={resumeData.main} />\n      {/* <Resume data={resumeData.resume}/>\n      <Portfolio data={resumeData.portfolio}/>\n      <Testimonials data={resumeData.testimonials}/> */}\n      <Contact data={resumeData.main}/> \n      <Footer data={resumeData.main} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/redux-store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store()}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}